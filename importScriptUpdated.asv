%% import different files from behaviour
set(0,'DefaultFigureWindowStyle','docked')

% events (trial event times)
% trial Params (parameters of each trial)
% wheel (wheel input)
% Licks (lick inputs)

folder = 'X:\ibn-vision\DATA\SUBJECTS\M19027\Training\20190514'

[events, params, wheel, licks] = importSessionFiles(folder);
% check for duplicate files, in which case create seperate folders?
mkdir(C:\Users\edward.horrocks\Documents\GitHub\animalBehaviourAnalysis\FIGURES,  
%% get wheel speed
% wheel struct, smth window type, windowSize(bins)
wheel = processWheel(wheel, 'gaussian', 10);

%% Process events
blockTags = {'passive', 'activeany', 'activenoabort', 'active'};
[events, licks] = processEvents(events, licks, blockTags);

%% Generate trial struct
trial = genTrialStruct(events, params, wheel, licks);

%% session metrics
blockTags = {'passive', 'activeany', 'activenoabort', 'active'};
[metrics,trial] = getSessionMetrics(trial, blockTags, 1); % plot flag

%% plot blocks trial-centric
for i = 1:numel(blockTags)
    plotTrials.(blockTags{i}) = trial(metrics.blockidx.(blockTags{i}));
    if ~isempty(plotTrials.(blockTags{i}))
        plotSDTrialBlock(plotTrials.(blockTags{i}), blockTags{i});
    end
end

%% session as time series
scrollPlotHandle = plotSessionAsSeries(events, params, trial, wheel, licks);


% %% When are mice licking?
% % need to define time periods of different epochs.
% respWindowLength = 4;
% 
% epochs.stimOnNotMoving = [];
% epochs.stimOnMoving = [];
% epochs.respWindow = [];
% epochs.ISI = [];
% 
% for itrial = 1:numel(events.sontimes)-1
%     epochs.stimOnNotMoving = [epochs.stimOnNotMoving; trial(itrial).onTime, events.movetimes(itrial)];
%     epochs.stimOnMoving = [epochs.stimOnMoving; events.movetimes(itrial), events.sofftimes(itrial)];
%     epochs.respWindow = [epochs.respWindow; events.sofftimes(itrial), events.sofftimes(itrial)+respWindowLength]; % not meaningful for passive?
%     epochs.ISI = [epochs.ISI; events.sofftimes(itrial)+2, trial(itrial+1).onTime];
% end
% 
% % number of licks in:
% % stim on not moving
% 
% licks = struct;
% B1 = epochs.stimOnNotMoving;
% B2 = epochs.stimOnMoving;
% B3 = epochs.respWindow;
% B4 = epochs.ISI;
% 
% % left licks
% idx1 = false(size(events.lickTimeL));
% idx2 = false(size(events.lickTimeL));
% idx3 = false(size(events.lickTimeL));
% idx4 = false(size(events.lickTimeL));
% 
% for ii = 1:length(events.lickTimeL)
%     idx1(ii) = any((events.lickTimeL(ii)>B1(:,1))&(events.lickTimeL(ii)<B1(:,2)));
%     idx2(ii) = any((events.lickTimeL(ii)>B2(:,1))&(events.lickTimeL(ii)<B2(:,2)));
%     idx3(ii) = any((events.lickTimeL(ii)>B3(:,1))&(events.lickTimeL(ii)<B3(:,2)));
%     idx4(ii) = any((events.lickTimeL(ii)>B4(:,1))&(events.lickTimeL(ii)<B4(:,2)));
% end
% 
% licks.totals.stimOnNotMoving(1) = sum(idx1);
% licks.totals.stimOnMoving(1) = sum(idx2);
% licks.totals.respWindow(1) = sum(idx3);
% licks.totals.ISI(1) = sum(idx4);
% 
% clear idx1 idx2 idx3 idx4
% 
% % right licks
% 
% % left licks
% idx1 = false(size(events.lickTimeR));
% idx2 = false(size(events.lickTimeR));
% idx3 = false(size(events.lickTimeR));
% idx4 = false(size(events.lickTimeR));
% 
% for ii = 1:length(events.lickTimeR)
%     idx1(ii) = any((events.lickTimeR(ii)>B1(:,1))&(events.lickTimeR(ii)<B1(:,2)));
%     idx2(ii) = any((events.lickTimeR(ii)>B2(:,1))&(events.lickTimeR(ii)<B2(:,2)));
%     idx3(ii) = any((events.lickTimeR(ii)>B3(:,1))&(events.lickTimeR(ii)<B3(:,2)));
%     idx4(ii) = any((events.lickTimeR(ii)>B4(:,1))&(events.lickTimeR(ii)<B4(:,2)));
% end
% 
% licks.totals.stimOnNotMoving(2) = sum(idx1);
% licks.totals.stimOnMoving(2) = sum(idx2);
% licks.totals.respWindow(2) = sum(idx3);
% licks.totals.ISI(2) = sum(idx4);
% 
% clear idx1 idx2 idx3 idx4
% 
% % lick frequency (#licks/time in epoch)
% 
% licks.freqs.stimOnNotMoving = sum(licks.totals.stimOnNotMoving)/sum(B1(:,2)-B1(:,1));
% licks.freqs.stimOnMoving = sum(licks.totals.stimOnMoving)/sum(B2(:,2)-B2(:,1));
% licks.freqs.respWindow = sum(licks.totals.respWindow)/sum(B3(:,2)-B3(:,1));
% licks.freqs.ISI = sum(licks.totals.ISI)/sum(B4(:,2)-B4(:,1));
% 
% figure
% hb = bar([licks.freqs.stimOnNotMoving, licks.freqs.stimOnMoving, licks.freqs.respWindow, licks.freqs.ISI], 'FaceColor','flat')
% ylabel('mean lick frequency (Hz)')
% a = gca
% a.XTickLabel = [{'stat stim'}, {'moving stim'}, {'resp window'}, {'ISI'}];
% hb.CData = [.8 .8 .8; .6 .6 .6; .4 .4 .4; .2 .2 .2]
% box off
% %a.XTickLabelRotation = 45
% % want to check -> pre-emptive licks correct or not?
% 
